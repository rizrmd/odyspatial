---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { getImage, Image } from 'astro:assets';
import slugify from 'slugify';

import type { ImageMetadata } from 'astro';
import LightBox from '../../components/react/LightBox.astro';
const images = import.meta.glob<{ default: ImageMetadata }>('/works/**/*.{jpeg,jpg,png}');

export async function getStaticPaths() {
  const works = await getCollection('works');

  return works.map((work) => ({
    params: {
      slug: work.id.split('/').shift()?.split('.').shift(),
    },
  }));
}

const { slug } = Astro.params;
const works = await getCollection('works', (work) => {
  if (work.id.split('/').shift()?.split('.').shift() === slug) {
    return work;
  }
});
const work = works[0].data;

const work_images = await Promise.all(
  Object.keys(images)
    .filter((e: string) => {
      return e.startsWith(`/works/${slug}`);
    })
    .map(async (e) => {
      return (await images[e]()).default;
    })
);

const img = {
  hero: work_images[0],
  shots: work_images.slice(1).map((e) => {
    return e;
  }),
};

const fetched_images = await Promise.all(
  work_images.map(async (e) => {
    return await getImage({ src: e });
  })
);

const info = [
  ['Location', work.location],
  ['Year', work.year],
  ['Type', work.type],
  ['Size', work.size],
  ['Service Used', work.services_used],
  ['Work Duration', `${work.est_hours} Work Hour ~ ${work.est_days} Days`],
];
---

<Layout description={`Our Works · ${work.name}`} title={`ODY Spatial · ${work.name}`}>
  <div class="min-h-screen flex-1 border-t border-primary-300 pt-[25px]">
    <div class="mx-auto max-w-2xl lg:max-w-7xl lg:px-8">
      <div class="flex flex-col items-stretch gap-4">
        <div class="flex flex-col items-baseline gap-5 px-4 lg:flex-row lg:px-0">
          <h1 class="font-hero text-6xl font-bold leading-[1em]">{work.name}</h1>
          <h2 class="">{work.desc}</h2>
        </div>
        <div class="flex select-none flex-wrap px-4 text-base sm:text-lg lg:px-0">
          {
            work.tags.map((e) => {
              return (
                <a
                  href={`/tag/${slugify(e)}`}
                  class="mb-1 mr-1 cursor-pointer border border-primary-950 px-2 transition-all hover:bg-primary-950 hover:text-white"
                >
                  {e}
                </a>
              );
            })
          }
        </div>

        <LightBox
          src={img.hero}
          images={work_images}
          images={fetched_images}
          alt={work.name + ' - Main'}
          className="h-[calc(100vh-250px)] object-cover"
        />

        <div class="flex flex-col-reverse gap-10 pt-6 lg:flex-row">
          <div class="flex flex-1 flex-col gap-4">
            {
              img.shots.map((e, idx) => {
                return (
                  <LightBox
                    src={e}
                    images={work_images}
                    images={fetched_images}
                    alt={work.name + ' - Shot ' + (idx + 1)}
                    class="object-cover"
                  />
                );
              })
            }
          </div>
          <div class="flex flex-1 flex-col gap-5 px-4 lg:max-w-[35%] lg:px-0">
            <h2
              class="mb-5 flex items-center space-x-5 text-3xl font-medium tracking-tight sm:text-4xl"
            >
              <div>Overview</div>
              <div class="flex-1 border-2 opacity-50"></div>
            </h2>
            {
              info.map(([key, value]) => {
                return (
                  <div class="flex flex-col">
                    <div class="text-sm font-bold uppercase">{key}</div>
                    <div class="flex ">
                      {typeof value === 'object' && Array.isArray(value) ? (
                        <div class="flex flex-wrap gap-2 pt-2">
                          {value.map((e) => {
                            return (
                              <a
                                href={`/tag/${slugify(e)}`}
                                class="border border-primary-950 px-2 transition-all hover:bg-primary-950 hover:text-white"
                              >
                                {e}
                              </a>
                            );
                          })}
                        </div>
                      ) : (
                        value
                      )}
                    </div>
                  </div>
                );
              })
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

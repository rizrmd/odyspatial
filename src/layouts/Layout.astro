---
import '@fontsource/plus-jakarta-sans/latin-800.css';
import '@fontsource/plus-jakarta-sans/latin-500.css';
import '@fontsource/italiana';
import '@fontsource/plus-jakarta-sans/latin-300.css';
import { ViewTransitions } from 'astro:transitions';
import Footer from '../components/layout/Footer.astro';
import Header from '../components/layout/Header.astro';

interface Props {
  description: string;
  title: string;
}

const { description, title } = Astro.props;
---

<!doctype html>
<html lang="en" x-cloak x-data :class="{ 'dark': $store.theme.isDark }">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body
    class="bg-primary-50 text-primary-950 antialiased transition dark:bg-primary-950 dark:text-primary-200"
  >
    <Header />
    <main>
      <slot />
    </main>
    <!-- <Footer /> -->
    <style is:global>
      [x-cloak] {
        display: none !important;
      }
    </style>
    <!-- Cal floating-popup embed code begins -->
    <script type="text/javascript">
      (function (C, A, L) {
        let p = function (a, ar) {
          a.q.push(ar);
        };
        let d = C.document;
        C.Cal =
          C.Cal ||
          function () {
            let cal = C.Cal;
            let ar = arguments;
            if (!cal.loaded) {
              cal.ns = {};
              cal.q = cal.q || [];
              d.head.appendChild(d.createElement('script')).src = A;
              cal.loaded = true;
            }
            if (ar[0] === L) {
              const api = function () {
                p(api, arguments);
              };
              const namespace = ar[1];
              api.q = api.q || [];
              if (typeof namespace === 'string') {
                cal.ns[namespace] = cal.ns[namespace] || api;
                p(cal.ns[namespace], ar);
                p(cal, ['initNamespace', namespace]);
              } else p(cal, ar);
              return;
            }
            p(cal, ar);
          };
      })(window, 'https://app.cal.com/embed/embed.js', 'init');
      Cal('init', '30min', { origin: 'https://cal.com' });

      Cal.ns['30min']('floatingButton', {
        calLink: 'ody-spatial/30min',
        config: { layout: 'month_view' },
        buttonText: 'Book Me Now',
        buttonPosition: 'bottom-right',
        hideButtonIcon: false,
      });
      Cal.ns['30min']('ui', { hideEventTypeDetails: false, layout: 'month_view' });
    </script>
    <!-- Cal floating-popup embed code ends -->
    <script>
      import Alpine from 'alpinejs';
      import collapse from '@alpinejs/collapse';

      Alpine.plugin(collapse);

      const store = {
        isDark: false,
        init() {
          this.isDark = (() => {
            if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
              return localStorage.getItem('theme') === 'dark';
            }
            return false;
          })();
        },
        toggle() {
          this.isDark = !this.isDark;
          localStorage.setItem('theme', this.isDark ? 'dark' : 'light');
        },
      };
      Alpine.store('theme', store);

      const w = window as any;
      w.Alpine = Alpine;
      Alpine.start();
    </script>
  </body>
</html>
